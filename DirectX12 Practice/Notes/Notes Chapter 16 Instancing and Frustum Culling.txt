Instancing refers to drawing the same object more than once in a scene. Instancing can provide significant optimization.

Frustum culling refers to rejecting entire groups of triangles from further processing that are outside the viewing frustum
with a simple test.

Instancing refers to drawing the same object more than once in a scene, but with different positions, orientations, scales,
materials, and textures.

It would be wasteful to duplicate the vertex and index data for each instance. Instead, we store a single copy of the
geometry (i.e., vertex and index lists) relative to the object’s local space. Then we draw the object several times, but
each time with a different world matrix and a different material if additional variety is desired.

Although this strategy saves memory, it still requires per-object API overhead. That is, for each object, we must set its
unique material, its world matrix, and invoke a draw command.

The Direct3D instancing API allows you to instance an object multiple times with a single draw call; and moreover, with
dynamic indexing, instancing is more flexible than in Direct3D 11.

When creating an input layout, you can specify that data streams in per-instance rather than at a per-vertex frequency by
using D3D12_INPUT_CLASSIFICATION_PER_INSTANCE_DATA instead of D3D12_INPUT_CLASSIFICATION_PER_VERTEX_DATA, respectively. You
would then bind a secondary vertex buffer to the input stream that contained the instancing data. Direct3D 12 still supports
this way of feeding instancing data into the pipeline.

The modern approach is to create a structured buffer that contains the perinstance data for all of our instances. For
example, if we were going to instance an object 100 times, we would create a structured buffer with 100 per-instance data
elements. We then bind the structured buffer resource to the rendering pipeline, and index into it in the vertex shader
based on the instance we are drawing.

Direct3D provides the system value identifi er SV_InstanceID which you can use in your vertex shader. For example, vertices
of the first instance will have id 0, vertices of the second instance will have id 1, and so on. So in our vertex shader, we
can index into the structured buffer to fetch the per-instance data we need.

For the GPU to consume the instance data, we need to create a structured buffer with element type InstanceData. Moreover,
this buffer will be dynamic (i.e., an upload buffer) so that we can update it every frame; in our demo, we copy the
instanced data of only the visible instances into the structure buffer (this is related to frustum culling), and the set of
visible instances will change as the camera moves/looks around.

Bounding volumes are primitive geometric objects that approximate the volume of an object. The tradeoff is that although the
bounding volume only approximates the object its form has a simple mathematical representation, which makes it easy to work
with.

The axis-aligned bounding box (AABB) of a mesh is a box that tightly surrounds the mesh and such that its faces are parallel
to the major axes. An AABB can be described by a minimum point v(min) and a maximum point v(max).  The minimum point vmin is
found by searching through all the vertices of the mesh and finding the minimum x-, y-, and z-coordinates, and the maximum
point vmax is found by searching through all the vertices of the mesh and finding the maximum x-, y-, and z-coordinates.

Alternatively, an AABB can be represented with the box center point c and extents vector e, which stores the distance from
the center point to the sides of the box along the coordinate axes.

It is easy to convert from one representation to the other. For example, given a bounding box defined by vmin and vmax, the
center/extents representation is given by:

c = 0.5(vmin + vmax)
e = 0.5(vmax - vmin)

In particular, if we compute the AABB of a mesh in local space, it gets transformed to an oriented bounding box (OBB) in
world space. However, we can always transform into the local space of the mesh and do the intersection there where the box
is axis-aligned.

Alternatively, we can recompute the AABB in the world space, but this can result in a "fatter" box that is a poorer
approximation to the actual volume.

The stride indicates how many bytes to skip to get to the next position element.

In order to compute bounding volumes of your meshes, you need to have a system memory copy of your vertex list available,
such as one stored in std::vector. This is because the CPU cannot read from a vertex buffer created for rendering.
Therefore, it is common for applications to keep a system memory copy around for things like this, as well as picking, and
collision detection.

The bounding sphere of a mesh is a sphere that tightly surrounds the mesh. A bounding sphere can be described with a center
point and radius. One way to compute the bounding sphere of a mesh is to first compute its AABB. We then take the center of
the AABB as the center of the bounding sphere:

c = 0.5(vmin + vmax)

The radius is then taken to be the maximum distance between any vertex p in the mesh from the center c:

r = max{ ||c - p|| : p E mesh }

Suppose we compute the bounding sphere of a mesh in local space. After the world transform, the bounding sphere may not
tightly surround the mesh due to scaling. Thus the radius needs to be rescaled accordingly. To compensate for nonuniform
scaling, we must scale the radius by the largest scaling component so that the sphere encapsulates the transformed mesh.
Another possible strategy is to avoid scaling all together by having all your meshes modeled to the same scale of the game
world. This way, models will not need to be rescaled once loaded into the application.

One easy way to construct the frustum planes is in view space, where the frustum takes on a canonical form centered at the
origin looking down the positive z-axis.

In the local space of the frustum (e.g., view space for the camera), the Origin would be zero, and the Orientation would
represent an identity transform (no rotation). We can position and orientate the frustum somewhere in the world by
specifying an Origin position and Orientation quaternion.

For frustum culling, one test we will want to perform is a frustum/sphere intersection test. This tells us whether a sphere
intersects the frustum. Note that a sphere completely inside the frustum counts as an intersection because we treat the
frustum as a volume, not just a boundary.

Because we model a frustum as six inward facing planes, a frustum/sphere test can be stated as follows: If there exists
a frustum plane L such that the sphere is in the negative half-space of L, then we can conclude that the sphere is
completely outside the frustum. If such a plane does not exist, then we conclude that the sphere intersects the frustum.

So a frustum/sphere intersection test reduces to six sphere/plane tests. Let the sphere have center point c and radius r.
Then the signed distance from the center of the sphere to the plane is k = n * c + d. If |k| < r then the sphere intersects
the plane. If k < -r then the sphere is behind the plane. If k > r then the sphere is in front of the plane and the sphere
intersects the positive half-space of the plane. For the purposes of the frustum/sphere intersection test, if the sphere is
in front of the plane, then we count it as an intersection because it intersects the positive half-space the plane defines.

The BoundingFrustum class provides the following member function to test if a sphere intersects a frustum. Note that the
sphere and frustum must be in the same coordinate system for the test to make sense.

The frustum/AABB intersection test follows the same strategy as the frustum/sphere test. Because we model a frustum as six
inward facing planes, a frustum/AABB test can be stated as follows: If there exists a frustum plane L such that the box is
in the negative half-space of L, then we can conclude that the box is completely outside the frustum. If such a plane does
not exist, then we conclude that the box intersects the frustum.

So a frustum/AABB intersection test reduces to six AABB/plane tests. The algorithm for an AABB/plane test is as follows.
Find the box diagonal vector v = PQ, passing through the center of the box, that is most aligned with the plane normal n.
For example, if P is in front of the plane, then Q must be also in front of the plane; or if Q is behind the plane, then P
must be also be behind the plane; or if P is behind the plane and Q is in front of the plane, then the box intersects the
plane.

The BoundingFrustum class provides the following member function to test if an AABB intersects a frustum. Note that the
AABB and frustum must be in the same coordinate system for the test to make sense.

The idea of frustum culling is for the application code to cull groups of triangles at a higher level than on a per-triangle
basis.

We build a bounding volume, such as a sphere or box, around each object in the scene. If the bounding volume does not
intersect the frustum, then we do not need to submit the object (which could contain thousands of triangles) to Direct3D for
drawing. This saves the GPU from having to do wasteful computations on invisible geometry, at the cost of an inexpensive
CPU test.