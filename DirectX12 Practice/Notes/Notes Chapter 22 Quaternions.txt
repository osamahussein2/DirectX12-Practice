An ordered pair of real numbers z = (a, b) is a complex number. The first component is called the real part and the second
component is called the imaginary part.

Moreover, equality, addition, subtraction, multiplication and division are defined as follows:

1. (a, b) = (c, d) if and only if a = c and b = d.
2. (a, b)+-(c, d) = (a+-c, b+-d).
3. (a, b)(c, d) = (ac - bd, ad + bc ).
4. (a, b) / (c, d) = (ac + bd / c^2 + d^2, bc - ad / c^2 + d^2) if (c, d) != (0, 0)

If a complex number is of the form (x, 0), then it is customary to identify it by the real number x and write x = (x, 0);
thus any real number can be thought of as a complex number with a zero imaginary component. Observe then that a real number
times a complex number is given by x(a, b) = (x, 0)(a, b) = (xa, xb) = (a, b)(x, 0) = (a, b)x, which is reminiscent of
scalar-vector multiplication.

We define the imaginary unit i = (0, 1). Using our definition of complex multiplication, observe that i^2 = (0, 1)(0, 1) =
(-1, 0) = -1, which implies i = sqrt(-1). This tells us that i solves the equation x^2 = -1.

The complex conjugate of a complex number z = (a, b) is denoted by |z and given by |z = (a, -b). A simple way to remember
the complex division formula is to multiply the numerator and denominator by the conjugate of the denominator so that the
denominator becomes a real number:

(a, b) / (c, d) = (a, b) / (c, d) * (c, -d) / (c, -d) =  (ac + bd, bc - ad) / c^2 + d^2 = (ac + bd / c^2 + d^2, bc - ad /
c^2 + d^2)

Next, we show that a complex number (a, b) can be written in the form a + ib. We have a = (a, 0), b = (b, 0) and i = (0, 1),
so a + ib = (a, 0) + (0, 1)(b, 0) = (a, 0) + (0, b) = (a, b)

Using the form a + ib, we can recast the formulas for addition, subtraction, multiplication and division as follows:

1. a + ib +- c + id = (a +- c) + i(b +- d)
2. (a + ib)(c + id) = (ac - bd) + i(ad + bc)
3. a + ib / c + id = ac + bd / c^2 + d^2 + i(bc - ad / c^2 + d^2) if (c, d) != (0, 0)

Furthermore, in this form, the complex conjugate of |z = a + ib is given by |z = a - ib.

The absolute value, or magnitude, of the complex number a + ib is defined as the length of the vector it represents, which
we know is given by: |a + ib| = sqrt(a^2 + b^2).

We say that a complex number is a unit complex number if it has a magnitude of one.

Because complex numbers can be viewed as just points or vectors in the 2D complex plane, we can just as well express their
components using polar coordinates:

r = |a + ib|

a + ib = r * cosO + ir * sinO = r(cosO + i * sinO)

The right-hand-side of the equation is called the polar representation of the complex number a + ib.

Let us multiply two complex numbers in polar form. Let z1 = r1(cosO1 + i * sinO1) and z2 = r2(cosO2 + i * sinO2). Then,

z1z2 = r1 * r2(cosO1 * cosO2 - sinO1 * sinO2 + i * (cosO1 * sinO2 + sinO1 * cosO2))

= r1 * r2(cos(O1 + O2) + i * sin(O1 + O2))

where we employed the trigonometric identities

sin(A + B) = sin A * cos B + cos A * sin B
cos(A + B) = cos A * cos B - sin A * sin B

Thus, geometrically, the product z1z2 is the complex number representing the vector with magnitude r1r2 and which makes an
angle O1 + O2 with the real axis. In particular, if r2 = 1, then z z1z2 = r1(cos(O1 + O2) + i * sin(O1 + O2)), which,
geometrically, rotates z1 by the angle O2. Therefore, multiplying a complex number z1 (thought of as a 2D vector or point)
by a unit complex number z2 results in a rotation of z1.

An ordered 4-tuple of real numbers q = (x, y, z, w) = (q1, q2, q3, q4) is a quaternion. This is commonly abbreviated as q =
(u, w) = (x, y, z, w), and we call u = (x, y, z) the imaginary vector part and w the real part.

Moreover, equality, addition, subtraction, multiplication, and division are defined as follows:

1. (u, a) = (v, b) if and only if u = v and a = b.
2. (u, a) +- (v, b) = (u +- v, a +- b).
3. (u, a)(v, b) = (av + bu + u * v, ab - u * v)

Let i = (1, 0, 0, 0), j = (0, 1, 0, 0), k = (0, 0, 1, 0) be quaternions. Then we have the special products, some of which
are reminiscent of the behavior of the cross product:

i^2 = j^2 = k^2 = ijk = -1
ij = k = -ji
jk = i = -kj
ki = j = -ik

Quaternion multiplication is not commutative; for instance, 22.2.2 showed that ij = -ji. Quaternion multiplication is
associative, however; this can be seen from the fact that quaternion multiplication can be written using matrix
multiplication and matrix multiplication is associative.

We relate real numbers, vectors (or points), and quaternions in the following way: Let s be a real number and let u = (x, y,
z) be a vector. Then

1. s = (0, 0, 0, s)
2. u = (x, y, z) = (u, 0) = (x, y, z, 0)

In other words, any real number can be thought of as a quaternion with a zero vector part, and any vector can be thought of
as a quaternion with zero real part. In particular, note that for the identity quaternion, 1 = (0, 0, 0, 1). A quaternion
with zero real part is called a pure quaternion.

The conjugate of a quaternion q = (q1, q2, q3, q4) = (u, q4) is denoted by q* and defined by:
q* = -q1 - q2 - q3 + q4 = (-u, q4)

In other words, we just negate the imaginary vector part of the quaternion.

We say that a quaternion is a unit quaternion if it has a norm of one.

As with matrices, quaternion multiplication is not commutative, so we cannot define a division operator. However, every
nonzero quaternion has an inverse. (The zero quaternion has zeros for all its components.)

Let q = (q1, q2, q3, q4) = (u, q4) be a nonzero quaternion, then the inverse is denoted by q^-1 and given by:

q^1 = q* / ||q||^2

Since quaternions are 4-tuples of real numbers, geometrically, we can visualize them as 4D vectors. In particular, unit
quaternions are 4D unit vectors that lie on the 4D unit sphere. With the exception of the cross product (which is only
defined for 3D vectors), our vector math generalizes to 4-space—and even n-space. Specifically, the dot product holds for
quaternions. Let p = (u, s) and q = (v, t), then:

p * q = u * v + st = ||p|| ||q|| cosO

where O is the angle between the quaternions. If the quaternions p and q are unit length, then p*q = cosO. The dot product
allows us to talk about the angle between two quaternions, as a measure of how "close" they are to each other on the unit
sphere.

For the purposes of animation, we want to interpolate from one orientation to another orientation. To interpolate
quaternions, we want to interpolate on the arc of the unit sphere so that our interpolated quaternion is also a unit
quaternion.

Linear interpolation followed by projecting the interpolated quaternion back on to the unit sphere results in a nonlinear
rate of rotation. Thus is you used linear interpolation for large angles, the speed of rotation will speed up and slow down.
This effect is often undesirable, and one reason why spherical interpolation is preferred (which rotates at a constant speed).

For small angles O between a and b, linear interpolation is a good approximation for spherical interpolation. However, when
using linear interpolation, the interpolated quaternion no longer lies on the unit sphere, so you must normalize the result
to project it back on to the unit sphere.

Linear interpolation results in nonlinear interpolation over the unit sphere after normalization. This means the rotation
speeds up and slows down as it interpolates, rather than moving at a constant speed.

Interpolating from a to b results in interpolating over the larger arc O1 on the 4D unit sphere, whereas interpolating from
a to -b results in interpolating over the shorter arc O2 on the 4D unit sphere. We want to choose the shortest arc on the 4D
unit sphere.

The DirectX math library supports quaternions. Because the "data" of a quaternion is four real numbers, DirectX math uses
the XMVECTOR type for storing quaternions.

Then some of the common quaternion functions defined are:

// Returns the quaternion dot product Q1·Q2.
XMVECTOR XMQuaternionDot(XMVECTOR Q1, XMVECTOR Q2);

// Returns the identity quaternion (0, 0, 0, 1).
XMVECTOR XMQuaternionIdentity();

// Returns the conjugate of the quaternion Q.
XMVECTOR XMQuaternionConjugate(XMVECTOR Q);

// Returns the norm of the quaternion Q.
XMVECTOR XMQuaternionLength(XMVECTOR Q);

// Normalizes a quaternion by treating it as a 4D vector.
XMVECTOR XMQuaternionNormalize(XMVECTOR Q);

// Computes the quaternion product Q1 and Q2.
XMVECTOR XMQuaternionMultiply(XMVECTOR Q1, XMVECTOR Q2);

// Returns a quaternions from axis-angle rotation representation.
XMVECTOR XMQuaternionRotationAxis(XMVECTOR Axis, FLOAT Angle);

// Returns a quaternions from axis-angle rotation representation, where the axis
// vector is normalized—this is faster than XMQuaternionRotationAxis.
XMVECTOR XMQuaternionRotationNormal(XMVECTOR NormalAxis, FLOAT Angle);

// Returns a quaternion from a rotation matrix.
XMVECTOR XMQuaternionRotationMatrix(XMMATRIX M);

// Returns a rotation matrix from a unit quaternion.
XMMATRIX XMMatrixRotationQuaternion(XMVECTOR Quaternion);

// Extracts the axis and angle rotation representation from the quaternion Q.
VOID XMQuaternionToAxisAngle(XMVECTOR *pAxis, FLOAT *pAngle, XMVECTOR Q);

// Returns slerp(Q1, Q2, t)
XMVECTOR XMQuaternionSlerp(XMVECTOR Q0, XMVECTOR Q1, FLOAT t);

After interpolation, we construct a transformation matrix because ultimately we use matrices for transformations in our
shader programs. The XMMatrixAffineTransformation function is declared as follows:

XMMATRIX XMMatrixAffineTransformation(
 XMVECTOR Scaling,
 XMVECTOR RotationOrigin,
 XMVECTOR RotationQuaternion,
 XMVECTOR Translation);

